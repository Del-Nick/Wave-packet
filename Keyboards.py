from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from Database import User


def registration_keyboard(user: User):
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(
        text="–°—Ç—É–¥–µ–Ω—Ç 1-2 –∫—É—Ä—Å–æ–≤",
        callback_data='registration_small_student'),
        InlineKeyboardButton(
            text="–°—Ç—É–¥–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã",
            callback_data='registration_student'))
    keyboard.row(InlineKeyboardButton(
        text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–∞—Ñ–µ–¥—Ä—ã",
        callback_data='registration_employee'))

    if user.admin:
        keyboard.row(InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–±–æ –º–Ω–µ",
            callback_data='delete_user'))

    return keyboard


def delete_keyboard(user: User):
    keyboard = InlineKeyboardBuilder()
    if user.admin:
        keyboard.row(InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–±–æ –º–Ω–µ",
            callback_data='delete_user'))

    return keyboard


def start_keyboard(user: User):
    keyboard = InlineKeyboardBuilder()

    match user.status:
        case 'small_student':
            keyboard.row(InlineKeyboardButton(
                text="–ù–∞—É—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã",
                callback_data='science_group_start'))
            keyboard.row(InlineKeyboardButton(
                text="–û –∫–∞—Ñ–µ–¥—Ä–µ",
                callback_data='about'))
            keyboard.row(InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–±–æ –º–Ω–µ",
                callback_data='delete_user'))

            return keyboard
        case _:
            return delete_keyboard(user)


scientific_groups = [[{'group': '–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –≤ –æ–ø—Ç–∏–∫–µ',
                       'callback': 'science_group_computational_experiment_in_optic'},

                      {'group': '–ö–≤–∞–Ω—Ç–æ–≤–∞—è –æ–ø—Ç–∏–∫–∞ –∏ –Ω–∞–Ω–æ—Ñ–æ—Ç–æ–Ω–∏–∫–∞',
                       'callback': 'science_group_quantum_optics_and_nanophotonics'},

                      {'group': '–ì—Ä—É–ø–ø–∞ –±–∏–æ–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ñ–æ—Ç–æ–Ω–∏–∫–∏',
                       'callback': 'science_group_biomedical_photonics'},

                      {'group': '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
                       'callback': 'science_group_organic_electronic'}],

                     [{'group': '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∫–≤–∞–Ω—Ç–æ–≤–∞—è –æ–ø—Ç–∏–∫–∞',
                       'callback': 'science_group_experimental_and_theoretical_quantum_optic'},

                      {'group': '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–ø—Ç–∏–∫–∏',
                       'callback': 'science_group_theoretical_problems_of_optic'},

                      {'group': '–ù–µ–ª–∏–Ω–µ–π–Ω–∞—è –ø–æ–ª—è—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è –æ–ø—Ç–∏–∫–∞',
                       'callback': 'science_group_nonlinear_polarization_optic'},

                      {'group': '–§–æ—Ç–æ–Ω–∏–∫–∞ –∏ –Ω–µ–ª–∏–Ω–µ–π–Ω–∞—è —Å–ø–µ–∫—Ç—Ä–æ—Å–∫–æ–ø–∏—è',
                       'callback': 'science_group_photonic_and_nonlinear_spectroscopy'}],

                     [{'group': '–õ–∞–∑–µ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∏–æ–º–æ–ª–µ–∫—É–ª'
                                '–∏ –º–µ—Ç–æ–¥–æ–≤ —Ñ–æ—Ç–æ–Ω–∏–∫–∏ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è',
                       'callback': 'science_group_laser_diagnostic_biomolecules'},

                      {'group': '–õ–∞–∑–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–µ–ª–∏–Ω–µ–π–Ω–∞—è —Å–ø–µ–∫—Ç—Ä–æ—Å–∫–æ–ø–∏—è',
                       'callback': 'science_group_laser_system_and_nonlinear_spectroscopy'},

                      {'group': '–¢–µ—Ä–∞–≥–µ—Ä—Ü–æ–≤–∞—è –æ–ø—Ç–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ —Å–ø–µ–∫—Ç—Ä–æ—Å–∫–æ–ø–∏—è',
                       'callback': 'science_group_THz_optoelectronics_and_spectroscopy'},

                      {'group': '–ù–µ–ª–∏–Ω–µ–π–Ω–∞—è –æ–ø—Ç–∏–∫–∞ –∏ —Å–≤–µ—Ä—Ö—Å–∏–ª—å–Ω—ã–µ —Å–≤–µ—Ç–æ–≤—ã–µ –ø–æ–ª—è',
                       'callback': 'science_group_nonlinear_optics_and_super-strong_light_fields'}],

                     [{'group': '–õ–∞–∑–µ—Ä–Ω–∞—è –æ–ø—Ç–æ–∞–∫—É—Å—Ç–∏–∫–∞',
                       'callback': 'science_group_laser_optoacoustics'},

                      {'group': '–†–µ–ª—è—Ç–∏–≤–∏—Å—Ç—Å–∫–∞—è –ª–∞–∑–µ—Ä–Ω–∞—è –ø–ª–∞–∑–º–∞',
                       'callback': 'science_group_relativistic_laser_plasma'},

                      {'group': '–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã',
                       'callback': 'science_group_stochastic_nonlinear_processes'},

                      {'group': '–¶–µ–Ω—Ç—Ä –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏',
                       'callback': 'science_group_center_for_measuring_technologies'}]]


def science_group_keyboard(user: User):
    if user.action[-1] in ['0', '1', '2', '3']:
        page = int(user.action[-1])
    else:
        page = 0

    keyboard = InlineKeyboardBuilder()

    for group in scientific_groups[page]:
        keyboard.row(InlineKeyboardButton(
            text=group['group'],
            callback_data=f"{group['callback']}_start"))

    back_button = InlineKeyboardButton(
        text="‚¨áÔ∏è –ú–µ–Ω—é ‚¨áÔ∏è",
        callback_data='science_group_üîô  –ù–∞–∑–∞–¥  üîô')

    if page == 0:
        keyboard.row(back_button,
                     InlineKeyboardButton(
                         text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ‚û°Ô∏è",
                         callback_data='science_group_page+'))
    elif page == 3:
        keyboard.row(InlineKeyboardButton(
            text=f"‚¨ÖÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3",
            callback_data='science_group_page-'),
            back_button)
    else:
        keyboard.row(InlineKeyboardButton(
            text=f"‚¨ÖÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}",
            callback_data='science_group_page-'),
            back_button,
            InlineKeyboardButton(
                text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 2} ‚û°Ô∏è",
                callback_data='science_group_page+')
        )

    # keyboard.row(InlineKeyboardButton(
    #     text="üîô  –ù–∞–∑–∞–¥  üîô",
    #     callback_data='science_group_üîô  –ù–∞–∑–∞–¥  üîô'))

    if user.admin:
        keyboard.row(InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–±–æ –º–Ω–µ",
            callback_data='delete_user'))

    return keyboard


def areas_courseworks_contacts_keyboard(user: User):
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(
        text="–ù–∞—É—á–Ω—ã–µ –Ω–∞–ø—Ä–≤–ª–µ–Ω–∏—è",
        callback_data=user.action.replace('start', 'areas')),
        InlineKeyboardButton(
            text="–ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã",
            callback_data=user.action.replace('start', 'courseworks')))
    keyboard.row(InlineKeyboardButton(
        text="–ö–æ–Ω—Ç–∞–∫—Ç—ã",
        callback_data=user.action.replace('start', 'contacts')))

    keyboard.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=f"{'_'.join(user.action.split('_')[:-2])}_start"))

    if user.admin:
        keyboard.row(InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–±–æ –º–Ω–µ",
            callback_data='delete_user'))

    return keyboard